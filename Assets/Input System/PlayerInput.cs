//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Input System/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b5f27395-9b66-4c9d-9e35-e20fbd5c257c"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""5a638295-529c-4ed3-81e2-64796ff6972a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d61d4c00-f797-4df2-8fe8-8daacd290585"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b8deef5d-7f49-4e6f-9c2e-7839d651e13c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""4496a6bb-c913-40fb-b8e7-a9d239cdcbf2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePerspective"",
                    ""type"": ""Button"",
                    ""id"": ""c9b3e105-a3e7-4f6a-a270-641362b97fda"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f42af700-8dc1-46ee-a22c-acbeec4a8b4b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cce0eb0c-1ab4-49b4-88ef-156bc1d52cca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95de4e5a-20da-4f95-aca0-f46cf5366996"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d65be973-064e-44c2-b069-55c5cf4afced"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ba399402-a474-4a8a-9031-690d92d821cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce792fae-ea7f-4834-a065-ae762c7510dc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4901a589-fdd8-4d20-a958-96fe02b2e995"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4894aae8-540b-4489-9c5d-c342e7bde184"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df3f7a2-ada2-4740-927b-2f19910c6fe9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""TogglePerspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Credits"",
            ""id"": ""c70f53b1-65a5-4e4e-9d19-389e4aaafe0d"",
            ""actions"": [
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""474e3938-f525-491f-a578-b95a34ac627c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4e7cafc-f5c6-4e82-aed0-6648e67e1ff8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Windows"",
            ""id"": ""e99e2a38-1195-4e44-b2ca-4dd6dd13629e"",
            ""actions"": [
                {
                    ""name"": ""CloseCurrent"",
                    ""type"": ""Button"",
                    ""id"": ""19555a62-9b11-41c5-8f8e-18b1a6cbacb7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b9c92f4c-fb4b-49da-8aa9-a8d94b521b58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchInventory"",
                    ""type"": ""Button"",
                    ""id"": ""420eedbb-c8ae-4eda-9478-6505fc58de15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""718c3ea6-0d5a-435c-a742-6559e6e5c133"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""SwitchPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61c6cc35-dd32-4e3a-91ae-ccfef614bae2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""SwitchInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84e489b7-172d-462e-80df-e3e0c74043b6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""CloseCurrent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Screen"",
            ""id"": ""4a6a1ede-c74b-43ed-938b-70cee49c018b"",
            ""actions"": [
                {
                    ""name"": ""SwitchFullScreen"",
                    ""type"": ""Button"",
                    ""id"": ""192f6986-3e29-4929-bc40-94233890cbb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PassSplashImage"",
                    ""type"": ""Button"",
                    ""id"": ""40e8bbde-6c70-4583-a3b5-fc4f7bf85ae0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0695aa78-ce8e-480f-ae45-19a60cf0e34d"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""SwitchFullScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a06a88c5-6e2d-4673-b6d2-84b397865ccb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""PassSplashImage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Walk = m_Player.FindAction("Walk", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_TogglePerspective = m_Player.FindAction("TogglePerspective", throwIfNotFound: true);
        // Credits
        m_Credits = asset.FindActionMap("Credits", throwIfNotFound: true);
        m_Credits_SpeedUp = m_Credits.FindAction("SpeedUp", throwIfNotFound: true);
        // Windows
        m_Windows = asset.FindActionMap("Windows", throwIfNotFound: true);
        m_Windows_CloseCurrent = m_Windows.FindAction("CloseCurrent", throwIfNotFound: true);
        m_Windows_SwitchPauseMenu = m_Windows.FindAction("SwitchPauseMenu", throwIfNotFound: true);
        m_Windows_SwitchInventory = m_Windows.FindAction("SwitchInventory", throwIfNotFound: true);
        // Screen
        m_Screen = asset.FindActionMap("Screen", throwIfNotFound: true);
        m_Screen_SwitchFullScreen = m_Screen.FindAction("SwitchFullScreen", throwIfNotFound: true);
        m_Screen_PassSplashImage = m_Screen.FindAction("PassSplashImage", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInput.Player.Disable() has not been called.");
        Debug.Assert(!m_Credits.enabled, "This will cause a leak and performance issues, PlayerInput.Credits.Disable() has not been called.");
        Debug.Assert(!m_Windows.enabled, "This will cause a leak and performance issues, PlayerInput.Windows.Disable() has not been called.");
        Debug.Assert(!m_Screen.enabled, "This will cause a leak and performance issues, PlayerInput.Screen.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Walk;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_TogglePerspective;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Player_Walk;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @TogglePerspective => m_Wrapper.m_Player_TogglePerspective;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @TogglePerspective.started += instance.OnTogglePerspective;
            @TogglePerspective.performed += instance.OnTogglePerspective;
            @TogglePerspective.canceled += instance.OnTogglePerspective;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @TogglePerspective.started -= instance.OnTogglePerspective;
            @TogglePerspective.performed -= instance.OnTogglePerspective;
            @TogglePerspective.canceled -= instance.OnTogglePerspective;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Credits
    private readonly InputActionMap m_Credits;
    private List<ICreditsActions> m_CreditsActionsCallbackInterfaces = new List<ICreditsActions>();
    private readonly InputAction m_Credits_SpeedUp;
    public struct CreditsActions
    {
        private @PlayerInput m_Wrapper;
        public CreditsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpeedUp => m_Wrapper.m_Credits_SpeedUp;
        public InputActionMap Get() { return m_Wrapper.m_Credits; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreditsActions set) { return set.Get(); }
        public void AddCallbacks(ICreditsActions instance)
        {
            if (instance == null || m_Wrapper.m_CreditsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Add(instance);
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
        }

        private void UnregisterCallbacks(ICreditsActions instance)
        {
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
        }

        public void RemoveCallbacks(ICreditsActions instance)
        {
            if (m_Wrapper.m_CreditsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreditsActions instance)
        {
            foreach (var item in m_Wrapper.m_CreditsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreditsActions @Credits => new CreditsActions(this);

    // Windows
    private readonly InputActionMap m_Windows;
    private List<IWindowsActions> m_WindowsActionsCallbackInterfaces = new List<IWindowsActions>();
    private readonly InputAction m_Windows_CloseCurrent;
    private readonly InputAction m_Windows_SwitchPauseMenu;
    private readonly InputAction m_Windows_SwitchInventory;
    public struct WindowsActions
    {
        private @PlayerInput m_Wrapper;
        public WindowsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseCurrent => m_Wrapper.m_Windows_CloseCurrent;
        public InputAction @SwitchPauseMenu => m_Wrapper.m_Windows_SwitchPauseMenu;
        public InputAction @SwitchInventory => m_Wrapper.m_Windows_SwitchInventory;
        public InputActionMap Get() { return m_Wrapper.m_Windows; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WindowsActions set) { return set.Get(); }
        public void AddCallbacks(IWindowsActions instance)
        {
            if (instance == null || m_Wrapper.m_WindowsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WindowsActionsCallbackInterfaces.Add(instance);
            @CloseCurrent.started += instance.OnCloseCurrent;
            @CloseCurrent.performed += instance.OnCloseCurrent;
            @CloseCurrent.canceled += instance.OnCloseCurrent;
            @SwitchPauseMenu.started += instance.OnSwitchPauseMenu;
            @SwitchPauseMenu.performed += instance.OnSwitchPauseMenu;
            @SwitchPauseMenu.canceled += instance.OnSwitchPauseMenu;
            @SwitchInventory.started += instance.OnSwitchInventory;
            @SwitchInventory.performed += instance.OnSwitchInventory;
            @SwitchInventory.canceled += instance.OnSwitchInventory;
        }

        private void UnregisterCallbacks(IWindowsActions instance)
        {
            @CloseCurrent.started -= instance.OnCloseCurrent;
            @CloseCurrent.performed -= instance.OnCloseCurrent;
            @CloseCurrent.canceled -= instance.OnCloseCurrent;
            @SwitchPauseMenu.started -= instance.OnSwitchPauseMenu;
            @SwitchPauseMenu.performed -= instance.OnSwitchPauseMenu;
            @SwitchPauseMenu.canceled -= instance.OnSwitchPauseMenu;
            @SwitchInventory.started -= instance.OnSwitchInventory;
            @SwitchInventory.performed -= instance.OnSwitchInventory;
            @SwitchInventory.canceled -= instance.OnSwitchInventory;
        }

        public void RemoveCallbacks(IWindowsActions instance)
        {
            if (m_Wrapper.m_WindowsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWindowsActions instance)
        {
            foreach (var item in m_Wrapper.m_WindowsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WindowsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WindowsActions @Windows => new WindowsActions(this);

    // Screen
    private readonly InputActionMap m_Screen;
    private List<IScreenActions> m_ScreenActionsCallbackInterfaces = new List<IScreenActions>();
    private readonly InputAction m_Screen_SwitchFullScreen;
    private readonly InputAction m_Screen_PassSplashImage;
    public struct ScreenActions
    {
        private @PlayerInput m_Wrapper;
        public ScreenActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchFullScreen => m_Wrapper.m_Screen_SwitchFullScreen;
        public InputAction @PassSplashImage => m_Wrapper.m_Screen_PassSplashImage;
        public InputActionMap Get() { return m_Wrapper.m_Screen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenActions set) { return set.Get(); }
        public void AddCallbacks(IScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenActionsCallbackInterfaces.Add(instance);
            @SwitchFullScreen.started += instance.OnSwitchFullScreen;
            @SwitchFullScreen.performed += instance.OnSwitchFullScreen;
            @SwitchFullScreen.canceled += instance.OnSwitchFullScreen;
            @PassSplashImage.started += instance.OnPassSplashImage;
            @PassSplashImage.performed += instance.OnPassSplashImage;
            @PassSplashImage.canceled += instance.OnPassSplashImage;
        }

        private void UnregisterCallbacks(IScreenActions instance)
        {
            @SwitchFullScreen.started -= instance.OnSwitchFullScreen;
            @SwitchFullScreen.performed -= instance.OnSwitchFullScreen;
            @SwitchFullScreen.canceled -= instance.OnSwitchFullScreen;
            @PassSplashImage.started -= instance.OnPassSplashImage;
            @PassSplashImage.performed -= instance.OnPassSplashImage;
            @PassSplashImage.canceled -= instance.OnPassSplashImage;
        }

        public void RemoveCallbacks(IScreenActions instance)
        {
            if (m_Wrapper.m_ScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenActions @Screen => new ScreenActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnTogglePerspective(InputAction.CallbackContext context);
    }
    public interface ICreditsActions
    {
        void OnSpeedUp(InputAction.CallbackContext context);
    }
    public interface IWindowsActions
    {
        void OnCloseCurrent(InputAction.CallbackContext context);
        void OnSwitchPauseMenu(InputAction.CallbackContext context);
        void OnSwitchInventory(InputAction.CallbackContext context);
    }
    public interface IScreenActions
    {
        void OnSwitchFullScreen(InputAction.CallbackContext context);
        void OnPassSplashImage(InputAction.CallbackContext context);
    }
}
